// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/pubsub/event_publisher_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pubsub "github.com/rodrigoaasm/truck-monitoring/http-file-receiver/internal/interfaces/pubsub"
)

// MockEventPublisherPayload is a mock of EventPublisherPayload interface.
type MockEventPublisherPayload struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherPayloadMockRecorder
}

// MockEventPublisherPayloadMockRecorder is the mock recorder for MockEventPublisherPayload.
type MockEventPublisherPayloadMockRecorder struct {
	mock *MockEventPublisherPayload
}

// NewMockEventPublisherPayload creates a new mock instance.
func NewMockEventPublisherPayload(ctrl *gomock.Controller) *MockEventPublisherPayload {
	mock := &MockEventPublisherPayload{ctrl: ctrl}
	mock.recorder = &MockEventPublisherPayloadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPublisherPayload) EXPECT() *MockEventPublisherPayloadMockRecorder {
	return m.recorder
}

// MockEventPublisherInterface is a mock of EventPublisherInterface interface.
type MockEventPublisherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventPublisherInterfaceMockRecorder
}

// MockEventPublisherInterfaceMockRecorder is the mock recorder for MockEventPublisherInterface.
type MockEventPublisherInterfaceMockRecorder struct {
	mock *MockEventPublisherInterface
}

// NewMockEventPublisherInterface creates a new mock instance.
func NewMockEventPublisherInterface(ctrl *gomock.Controller) *MockEventPublisherInterface {
	mock := &MockEventPublisherInterface{ctrl: ctrl}
	mock.recorder = &MockEventPublisherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventPublisherInterface) EXPECT() *MockEventPublisherInterfaceMockRecorder {
	return m.recorder
}

// SendEvent mocks base method.
func (m *MockEventPublisherInterface) SendEvent(payload pubsub.EventPublisherPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockEventPublisherInterfaceMockRecorder) SendEvent(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockEventPublisherInterface)(nil).SendEvent), payload)
}
