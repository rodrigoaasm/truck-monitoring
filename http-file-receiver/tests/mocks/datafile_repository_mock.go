// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/repositories/datafile_repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataFileRepositoryInterface is a mock of DataFileRepositoryInterface interface.
type MockDataFileRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataFileRepositoryInterfaceMockRecorder
}

// MockDataFileRepositoryInterfaceMockRecorder is the mock recorder for MockDataFileRepositoryInterface.
type MockDataFileRepositoryInterfaceMockRecorder struct {
	mock *MockDataFileRepositoryInterface
}

// NewMockDataFileRepositoryInterface creates a new mock instance.
func NewMockDataFileRepositoryInterface(ctrl *gomock.Controller) *MockDataFileRepositoryInterface {
	mock := &MockDataFileRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockDataFileRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataFileRepositoryInterface) EXPECT() *MockDataFileRepositoryInterfaceMockRecorder {
	return m.recorder
}

// PutDatafile mocks base method.
func (m *MockDataFileRepositoryInterface) PutDatafile(fileReader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDatafile", fileReader)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutDatafile indicates an expected call of PutDatafile.
func (mr *MockDataFileRepositoryInterfaceMockRecorder) PutDatafile(fileReader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDatafile", reflect.TypeOf((*MockDataFileRepositoryInterface)(nil).PutDatafile), fileReader)
}
