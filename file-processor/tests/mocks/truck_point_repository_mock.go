// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/repositories/truck_point_repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/rodrigoaasm/truck-monitoring/file-processor/internal/domain/entities"
)

// MockTruckPointRepository is a mock of TruckPointRepository interface.
type MockTruckPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTruckPointRepositoryMockRecorder
}

// MockTruckPointRepositoryMockRecorder is the mock recorder for MockTruckPointRepository.
type MockTruckPointRepositoryMockRecorder struct {
	mock *MockTruckPointRepository
}

// NewMockTruckPointRepository creates a new mock instance.
func NewMockTruckPointRepository(ctrl *gomock.Controller) *MockTruckPointRepository {
	mock := &MockTruckPointRepository{ctrl: ctrl}
	mock.recorder = &MockTruckPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTruckPointRepository) EXPECT() *MockTruckPointRepositoryMockRecorder {
	return m.recorder
}

// WriteData mocks base method.
func (m *MockTruckPointRepository) WriteData(arg0 []entities.TruckPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteData indicates an expected call of WriteData.
func (mr *MockTruckPointRepositoryMockRecorder) WriteData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockTruckPointRepository)(nil).WriteData), arg0)
}
